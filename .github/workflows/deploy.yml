name: Merge Branch

on:
  push:
    branches:
      - main

jobs:

  qa-plan:
    name: Terraform QA Plan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        id: qa-init
        run: terraform init

      - name: Terraform Validate
        id: qa-validate
        run: |
          terraform validate
          if [ $? -ne 0 ];
          then
            echo "## :bangbang: Validation failed.  Check the logs" >> $GITHUB_STEP_SUMMARY
          else
            echo "## :white_check_mark: Success! The configuration is valid." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Plan
        continue-on-error: true
        id: qa-plan
        run: |
          terraform plan -input=false -no-color -out=tfplan
          # save for later use
          terraform show -no-color tfplan > qa-plan.txt    

  stage-plan:
    name: Terraform Stage Plan
    runs-on: ubuntu-latest
    needs: [run_int_test_qa]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        id: stage-init
        run: terraform init

      - name: Terraform Validate
        id: stage-validate
        run: |
          terraform validate
          if [ $? -ne 0 ];
          then
            echo "## :bangbang: Validation failed.  Check the logs" >> $GITHUB_STEP_SUMMARY
          else
            echo "## :white_check_mark: Success! The configuration is valid." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Plan
        continue-on-error: true
        id: stage-plan
        run: |
          terraform plan -input=false -no-color -out=tfplan
          # save for later use
          terraform show -no-color tfplan > stage-plan.txt    

  prod-plan:
    name: Terraform Prod Plan
    runs-on: ubuntu-latest
    needs: [run_int_test_stage]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        id: prod-init
        run: terraform init

      - name: Terraform Validate
        id: prod-validate
        run: |
          terraform validate
          if [ $? -ne 0 ];
          then
            echo "## :bangbang: Validation failed.  Check the logs" >> $GITHUB_STEP_SUMMARY
          else
            echo "## :white_check_mark: Success! The configuration is valid." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Plan
        continue-on-error: true
        id: prod-plan
        run: |
          terraform plan -input=false -no-color -out=tfplan
          # save for later use
          terraform show -no-color tfplan > prod-plan.txt    

  merge-main-to-qa:
    runs-on: ubuntu-latest
    environment: QA
    needs: [qa-plan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          gh-cli-version: 2.32.0
      - name: Merge changes
        # will change to novaprj
        if: github.actor == 'coljtob'
        run: |
          SOURCE_BRANCH=main
          TARGET_BRANCH=QA
        
          echo "Merging changes from $SOURCE_BRANCH to $TARGET_BRANCH"
          
          git config --global user.email "ctobin@adobe.com"
          git config --global user.name "coljtob"
          git fetch origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH
          git merge -s ort -X theirs main --no-edit --verbose --allow-unrelated-histories 
          git push origin $TARGET_BRANCH

  wait-on-qa-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for 5 seconds
        run: sleep 5s


  run_int_test_qa:
    runs-on: ubuntu-latest
    environment: QA
    needs: [merge-main-to-qa]
    steps:
      - name: Check URL status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://example.com)
          if [ "$response" == "200" ]; then
            echo "URL is reachable with status code 200"
          else
            echo "URL is unreachable or returned a status code other than 200"
            exit 1
          fi

  merge-main-to-stage:
    runs-on: ubuntu-latest
    environment: STAGE
    needs: [run_int_test_qa, stage-plan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          gh-cli-version: 2.32.0
      - name: Merge changes
        # will change to novaprj
        if: github.actor == 'coljtob'
        run: |
          SOURCE_BRANCH=main
          TARGET_BRANCH=STAGE
          
          echo "Merging changes from $SOURCE_BRANCH to $TARGET_BRANCH"
          
          git config --global user.email "ctobin@adobe.com"
          git config --global user.name "coljtob"
          git fetch origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH
          git merge -s ort -X theirs main --no-edit --verbose --allow-unrelated-histories 
          git push origin $TARGET_BRANCH

  wait-on-stage-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for 5 seconds
        run: sleep 5s

  run_int_test_stage:
    runs-on: ubuntu-latest
    environment: STAGE
    needs: [merge-main-to-stage]
    steps:
      - name: Check URL status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://example.com)
          if [ "$response" == "200" ]; then
            echo "URL is reachable with status code 200"
          else
            echo "URL is unreachable or returned a status code other than 200"
            exit 1
          fi

  merge-stage-to-prod:
    runs-on: ubuntu-latest
    environment: PROD
    needs: [run_int_test_stage, prod-plan]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          gh-cli-version: 2.32.0
      - name: Merge changes
        # will change to novaprj
        if: github.actor == 'coljtob'
        run: |
          SOURCE_BRANCH=main
          TARGET_BRANCH=PROD
          
          echo "Merging changes from $SOURCE_BRANCH to $TARGET_BRANCH"
          
          git config --global user.email "ctobin@adobe.com"
          git config --global user.name "coljtob"
          git fetch origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH
          git merge -s ort -X theirs main --no-edit --verbose --allow-unrelated-histories 
          git push origin $TARGET_BRANCH

  wait-on-prod-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for 5 seconds
        run: sleep 5s

  run_int_test_prod:
    runs-on: ubuntu-latest
    environment: PROD
    needs: [merge-stage-to-prod]
    steps:
      - name: Check URL status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://example.com)
          if [ "$response" == "200" ]; then
            echo "URL is reachable with status code 200"
          else
            echo "URL is unreachable or returned a status code other than 200"
            exit 1
          fi
          
